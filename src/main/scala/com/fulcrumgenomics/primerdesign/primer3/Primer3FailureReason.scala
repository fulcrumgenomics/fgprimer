/*
 * The MIT License
 *
 * Copyright (c) 2021 Fulcrum Genomics LLC
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

package com.fulcrumgenomics.primerdesign.primer3
import com.fulcrumgenomics.FgBioDef._
import enumeratum.EnumEntry

import scala.collection.immutable

/** Trait that entries in [[Primer3FailureReason]] will extend. */
sealed trait Primer3FailureReason extends EnumEntry {
  def reason: String
}

/** Enum to represent the various reasons Primer3 removes primers and primer pairs. */
object Primer3FailureReason extends FgBioEnum[Primer3FailureReason] {
  case object GcContent              extends Primer3FailureReason { val reason: String = "GC content failed" }
  case object GcClamp                extends Primer3FailureReason { val reason: String = "GC clamp failed" }
  case object HairpinStability       extends Primer3FailureReason { val reason: String = "high hairpin stability" }
  case object HighTm                 extends Primer3FailureReason { val reason: String = "high tm" }
  case object LowTm                  extends Primer3FailureReason { val reason: String = "low tm" }
  case object LowercaseMasking       extends Primer3FailureReason { val reason: String = "lowercase masking of 3' end" }
  case object LongPolyX              extends Primer3FailureReason { val reason: String = "long poly-x seq" }
  case object ProductSize            extends Primer3FailureReason { val reason: String = "unacceptable product size" }
  case object TooManyNs              extends Primer3FailureReason { val reason: String = "too many Ns" }
  case object HighAnyComplementarity extends Primer3FailureReason { val reason: String = "high any compl" }
  case object HighEndComplementarity extends Primer3FailureReason { val reason: String = "high end compl" }

  // Note: the following failures are not generated by Primer3 but are convenient to have so that post-processing
  //       failures can be tracked in the same way that Primer3 failures are
  case object LongDinuc              extends Primer3FailureReason { val reason: String = "long dinucleotide run" }
  case object SecondaryStructure     extends Primer3FailureReason { val reason: String = "undesirable secondary structure" }
  case object OffTargetAmplification extends Primer3FailureReason { val reason: String = "amplifies off-target regions" }

  /** Returns all the Enum entries. */
  override def values: immutable.IndexedSeq[Primer3FailureReason] = findValues

  /** Returns the first [[Primer3FailureReason]] with the given reason for failure, or None if none exists. */
  def fromReason(reason: String): Option[Primer3FailureReason] = Primer3FailureReason.values.find(_.reason == reason)
}
